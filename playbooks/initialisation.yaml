---
- name: Créer les containers Dockers principaux
  hosts: localhost
  gather_facts: no
  become: yes
  tasks:
    - name: Créer le dossier ProxyInverse1 pour stocker les clefs
      ansible.builtin.file:
        path: /home/user-ansible/projetAnsible/ressources/keys/proxyinverse1/
        state: directory
    - name: Créer le réseau bridge
      community.docker.docker_network:
        name: "{{ hostvars['Docker']['NameBridge'] }}"
        driver: bridge
        state: present
    - name: Créer le conteneur ProxyInverse
      docker_container:
        name: proxyinverse1
        image: debian-ssh-py:v14
        state: started
        restart_policy: always
        interactive: yes
        tty: yes
        detach: true
        volumes: "/home/user-ansible/projetAnsible/ressources/keys/proxyinverse1:/root/keys/"
        ports:
          - "80:80"
        networks:
          - name: LAN_ANSIBLE
            ipv4_address: "{{ hostvars['proxyinverse1']['ansible_host'] }}"
    - name: Attendre 10 secondes le temps que la clef SSH se génère.
      ansible.builtin.pause:
        seconds: 10

- name: Installe les paquets de base
  hosts: proxyinverse1
  become: yes
  roles:
    - base_packages

- name: Création du container Base de Données (MySQL)
  hosts: localhost
  tasks:
    - name: Créer le dossier SQL pour stocker la data
      ansible.builtin.file:
        path: /home/user-ansible/projetAnsible/ressources/sql/
    - name: Create_bdd_container
      community.docker.docker_container:
        name: bdd1
        image: mysql
        state: started
        restart_policy: always
        detach: yes
        volumes: "/home/user-ansible/projetAnsible/ressources/sql:/var/lib/mysql"
        tty: yes
        interactive: yes
        networks:
          - name: LAN_ANSIBLE
            ipv4_address: "{{ hostvars['bdd1']['ansible_host'] }}"
        env:
          MYSQL_ROOT_PASSWORD: "{{ hostvars['bdd1']['mysql_root_password'] }}"
          MYSQL_DATABASE: "{{ hostvars['bdd1']['mysql_database'] }}"
          MYSQL_USER: "{{ hostvars['bdd1']['mysql_user'] }}"
          MYSQL_PASSWORD: "{{ hostvars['bdd1']['mysql_password'] }}"

- name: Création du container PHPMyAdmin (MySQL)
  hosts: localhost
  tasks:
      - name: Create_phpmyadmin_container
        community.docker.docker_container:
          name: phpmyadmin
          image: phpmyadmin
          state: started
          restart_policy: always
          detach: yes
          tty: yes
          interactive: yes
          networks:
            - name: LAN_ANSIBLE
              ipv4_address: "{{ hostvars['phpmyadmin']['ansible_host'] }}"
          env:
            PMA_HOST: "{{ hostvars['phpmyadmin']['pma_host'] }}"
            PMA_PORT: "{{ hostvars['phpmyadmin']['pma_port'] }}"

- name: Activer les modules pour le ProxyInverse
  hosts: proxyinverse1
  become: yes
  tasks:
    - name: Active le module mod_proxy
      command: a2enmod proxy
    - name: Active le mode proxy_http
      command: a2enmod proxy_http

- name: Mise en place du ProxyInverse pour PhpMyAdmin
  hosts: proxyinverse1
  vars:
    - FQDN: "phpmyadmin.ansible.local"
    - Name: "PHPMYADMIN"
    - Ipv4Port: "80"
    - Ipv4Dest: "{{ hostvars['phpmyadmin']['ansible_host'] }}"
    - template: "ReverseProxyWebsite_no-ACL.j2"
  roles:
    - template_proxyinverse

- name: Interdire les accès http depuis une adresse IP en entrée
  hosts: proxyinverse1
  become: yes
  tasks:
    - name: Copier le fichier deny ip vers le proxyinverse
      copy:
        src: ../ressources/Templates/_deny_direct-ip.conf
        dest: /etc/apache2/sites-available/_deny_direct-ip.conf
    - name: Activer la conf
      command: a2ensite _deny_direct-ip.conf
    - name: Redemarrer le service Apache
      command: service apache2 restart

- name: Création du web Manager (Node Manager)
  hosts: localhost
  become: yes
  tasks:
    - name: Créer le dossier NodeManager pour stocker les clefs
      ansible.builtin.file:
        path: /home/user-ansible/projetAnsible/ressources/keys/NodeManager/
        state: directory
    - name: Créer le container NodeManager
      docker_container:
        name: NodeManager
        image: debian-ssh-py:v14
        state: started
        restart_policy: always
        interactive: yes
        tty: yes
        detach: true
        volumes:
          - "../ressources/keys/NodeManager:/root/keys/"
          - "../ressources/web_management/:/var/www/{{ hostvars['NodeManager']['FQDN'] }}"
        networks:
          - name: LAN_ANSIBLE
            ipv4_address: "{{ hostvars['NodeManager']['ansible_host'] }}"
    - name: Attendre 10 secondes le temps que la clef SSH se génère.
      ansible.builtin.pause:
        seconds: 10

- name: Installe les paquets de base
  hosts: NodeManager
  become: yes
  roles:
    - base_packages

- name: Copier la clef SSH privée de user-ansible@localhost
  hosts: NodeManager
  become: yes
  tasks:
    - name: Copier la clef SSH privée de user-ansible@localhost
      ansible.builtin.copy:
        src: ~/.ssh/id_rsa
        dest: /root/.ssh/id_rsa_gateway

- name: Mise en place du service web 'web-management'
  hosts: NodeManager
  become: yes
  vars:
    - Name: "NodeManager"
    - IPv4Listen: "*"
    - TCPListen: "80"
    - FQDN: "{{ hostvars['NodeManager']['FQDN'] }}"
    - path: "/var/www/{{ hostvars['NodeManager']['FQDN'] }}"
    - Logs: ""
    - template: "HTTP-VH.j2"
  roles:
    - template_website